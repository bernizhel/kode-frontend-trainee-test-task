{"version":3,"sources":["features/counter/Counter.module.css","logo.svg","features/counter/counterAPI.js","features/counter/counterSlice.js","features/counter/Counter.js","App.js","app/store.js","index.js"],"names":["module","exports","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","incrementValue","Number","className","styles","row","button","onClick","textbox","onChange","e","target","asyncButton","getState","App","src","logo","alt","href","rel","store","configureStore","reducer","counterReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ab63332.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__3u4u9\",\"value\":\"Counter_value__3eCHe\",\"button\":\"Counter_button__3QKQd\",\"textbox\":\"Counter_textbox__2kSPT\",\"asyncButton\":\"Counter_asyncButton__XeGiW Counter_button__3QKQd\"};","export default __webpack_public_path__ + \"static/media/logo.4ced9c43.svg\";","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n    return new Promise((resolve) =>\n        setTimeout(() => resolve({ data: amount }), 500),\n    );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n    value: 0,\n    status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n    'counter/fetchCount',\n    async (amount) => {\n        const response = await fetchCount(amount);\n        // The value we return becomes the `fulfilled` action payload\n        return response.data;\n    },\n);\n\nexport const counterSlice = createSlice({\n    name: 'counter',\n    initialState,\n    // The `reducers` field lets us define reducers and generate associated actions\n    reducers: {\n        increment: (state) => {\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.value += 1;\n        },\n        decrement: (state) => {\n            state.value -= 1;\n        },\n        // Use the PayloadAction type to declare the contents of `action.payload`\n        incrementByAmount: (state, action) => {\n            state.value += action.payload;\n        },\n    },\n    // The `extraReducers` field lets the slice handle actions defined elsewhere,\n    // including actions generated by createAsyncThunk or in other slices.\n    extraReducers: (builder) => {\n        builder\n            .addCase(incrementAsync.pending, (state) => {\n                state.status = 'loading';\n            })\n            .addCase(incrementAsync.fulfilled, (state, action) => {\n                state.status = 'idle';\n                state.value += action.payload;\n            });\n    },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n    const currentValue = selectCount(getState());\n    if (currentValue % 2 === 1) {\n        dispatch(incrementByAmount(amount));\n    }\n};\n\nexport default counterSlice.reducer;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    decrement,\n    increment,\n    incrementByAmount,\n    incrementAsync,\n    incrementIfOdd,\n    selectCount,\n} from './counterSlice';\nimport styles from './Counter.module.css';\n\nexport function Counter() {\n    const count = useSelector(selectCount);\n    const dispatch = useDispatch();\n    const [incrementAmount, setIncrementAmount] = useState('2');\n\n    const incrementValue = Number(incrementAmount) || 0;\n\n    return (\n        <div>\n            <div className={styles.row}>\n                <button\n                    className={styles.button}\n                    aria-label='Decrement value'\n                    onClick={() => dispatch(decrement())}\n                >\n                    -\n                </button>\n                <span className={styles.value}>{count}</span>\n                <button\n                    className={styles.button}\n                    aria-label='Increment value'\n                    onClick={() => dispatch(increment())}\n                >\n                    +\n                </button>\n            </div>\n            <div className={styles.row}>\n                <input\n                    className={styles.textbox}\n                    aria-label='Set increment amount'\n                    value={incrementAmount}\n                    onChange={(e) => setIncrementAmount(e.target.value)}\n                />\n                <button\n                    className={styles.button}\n                    onClick={() => dispatch(incrementByAmount(incrementValue))}\n                >\n                    Add Amount\n                </button>\n                <button\n                    className={styles.asyncButton}\n                    onClick={() => dispatch(incrementAsync(incrementValue))}\n                >\n                    Add Async\n                </button>\n                <button\n                    className={styles.button}\n                    onClick={() => dispatch(incrementIfOdd(incrementValue))}\n                >\n                    Add If Odd\n                </button>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Counter } from './features/counter/Counter';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <header className='App-header'>\n                <img src={logo} className='App-logo' alt='logo' />\n                <Counter />\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <span>\n                    <span>Learn </span>\n                    <a\n                        className='App-link'\n                        href='https://reactjs.org/'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        React\n                    </a>\n                    <span>, </span>\n                    <a\n                        className='App-link'\n                        href='https://redux.js.org/'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        Redux\n                    </a>\n                    <span>, </span>\n                    <a\n                        className='App-link'\n                        href='https://redux-toolkit.js.org/'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        Redux Toolkit\n                    </a>\n                    ,<span> and </span>\n                    <a\n                        className='App-link'\n                        href='https://react-redux.js.org/'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        React Redux\n                    </a>\n                </span>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n    reducer: {\n        counter: counterReducer,\n    },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}